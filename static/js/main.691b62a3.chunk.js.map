{"version":3,"sources":["components/Content/content.tsx","app-data/app-data.ts","components/Api/api.ts","components/Tab/tab.tsx","components/TabMenu/tabMenu.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Content","_ref","articles","react_default","a","createElement","className","map","newsItem","index","key","src","urlToImage","alt","title","description","themes","getNews","searchWord","url","concat","fetch","then","response","json","Tab","tabItem","activeTab","onTabClick","onClick","TabMenu","tab_Tab","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","id","setState","state","data","content","Fragment","tabMenu_TabMenu","content_Content","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAIaA,EAAgC,SAAAC,GAA6B,IAA3BC,EAA2BD,EAA3BC,SAC3C,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACTJ,EAASK,IAAI,SAACC,EAAUC,GACrB,OACIN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,EAAOH,UAAU,aACtBH,EAAAC,EAAAC,cAAA,OAAKM,IAAKH,EAASI,WAAYC,IAAKL,EAASM,QAC7CX,EAAAC,EAAAC,cAAA,aAAQG,EAASM,OACjBX,EAAAC,EAAAC,cAAA,YAAOG,EAASO,kBCV3BC,EAAmB,CAAC,SAAU,OAAQ,aAAc,UCCpDC,EAAU,SAACC,GACpB,IAAMC,EAAW,GAAAC,ODHU,0BCGV,iBAAAA,OAA6BF,EAA7B,YAAAE,ODJS,oCCK1B,OAAOC,MAAMF,GACRG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,UCFtBC,EAAwB,SAAAxB,GAA4D,IAAzDyB,EAAyDzB,EAAzDyB,QAASC,EAAgD1B,EAAhD0B,UAAWlB,EAAqCR,EAArCQ,MAAOmB,EAA8B3B,EAA9B2B,WAC/D,OACIzB,EAAAC,EAAAC,cAAA,UAAQC,UAAWqB,IAAclB,EAAQ,aAAe,MACpDC,IAAKD,EACLoB,QAAS,kBAAMD,EAAWnB,KACzBiB,ICJAI,EAA+B,SAAA7B,GAAoD,IAAjDe,EAAiDf,EAAjDe,OAAQW,EAAyC1B,EAAzC0B,UAAWC,EAA8B3B,EAA9B2B,WAC9D,OACIzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACVU,EAAOT,IAAI,SAACmB,EAASjB,GAClB,OACIN,EAAAC,EAAAC,cAAC0B,EAAD,CAAKL,QAASA,EAASC,UAAWA,EAAWlB,MAAOA,EAAOmB,WAAYA,EAAYlB,IAAKD,QC6B7FuB,qBA7Bb,SAAAA,EAAYC,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACrBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRL,WAAmC,SAACa,GAClCP,EAAKQ,SAAS,CAAEf,UAAWc,IAC3BxB,EAAQiB,EAAKS,MAAM3B,OAAOyB,IACvBnB,KAAK,SAAAsB,GAAI,OAAIV,EAAKQ,SAAS,CAAEG,QAASD,EAAK1C,cAV9CgC,EAAKS,MAAS,CACZ3B,OAAQA,EACR6B,QAAS,GACTlB,UAAW,GALQO,mFAgBrBG,KAAKT,WAAW,oCAIhB,OACEzB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KACE3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAS/B,OAAQqB,KAAKM,MAAM3B,OAAQW,UAAWU,KAAKM,MAAMhB,UAAWC,WAAYS,KAAKT,aACtFzB,EAAAC,EAAAC,cAAC2C,EAAD,CAAS9C,SAAUmC,KAAKM,MAAME,kBAxBpBI,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.691b62a3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { IArticles } from '../../interfaces/IArticles'\r\n\r\nexport const Content: React.SFC<IArticles> = ({articles}): JSX.Element => {\r\n    return (\r\n        <ul className=\"news-list\">\r\n            {articles.map((newsItem, index) => {\r\n                return (\r\n                    <li key={index} className=\"news-item\">\r\n                        <img src={newsItem.urlToImage} alt={newsItem.title}></img>\r\n                        <label>{newsItem.title}</label>\r\n                        <span>{newsItem.description}</span>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n};","export const apiKey: string = 'd53428ee8f524b5a8eca0496826ec26d';\r\nexport const baseUrl: string = 'https://newsapi.org/v2/';\r\nexport const themes: string[] = ['People', 'Auto', 'Technology', 'Realty'];","import { baseUrl, apiKey} from '../../app-data/app-data'\r\nimport { IArticles } from '../../interfaces/IArticles'\r\n\r\nexport const getNews = (searchWord: string): Promise<IArticles> => {\r\n    const url: string = `${baseUrl}everything?q=${searchWord}&apiKey=${apiKey}`;\r\n    return fetch(url)\r\n        .then(response => response.json());\r\n};","import React from 'react';\r\n\r\nimport { ITab } from '../../interfaces/ITab'\r\n\r\nexport const Tab: React.SFC<ITab>  = ({ tabItem, activeTab, index, onTabClick }): JSX.Element => {\r\n    return (\r\n        <button className={activeTab === index ? 'tab active' : 'tab'}\r\n            key={index}\r\n            onClick={() => onTabClick(index)}>\r\n            {tabItem}\r\n        </button>\r\n    )\r\n};","import React from 'react';\r\n\r\nimport { Tab } from '../Tab/tab'\r\nimport { ITabMenu } from '../../interfaces/ITabMenu'\r\n\r\nexport const TabMenu: React.SFC<ITabMenu> = ({ themes, activeTab, onTabClick }): JSX.Element => {\r\n    return (\r\n        <div className='tab-menu'>\r\n            {themes.map((tabItem, index) => {\r\n                return (\r\n                    <Tab tabItem={tabItem} activeTab={activeTab} index={index} onTabClick={onTabClick} key={index} />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n};","import React, { Component } from 'react';\r\n\r\nimport { IState } from './interfaces/IState'\r\nimport { Content } from './components/Content/content'\r\nimport { getNews } from './components/Api/api'\r\nimport { TabMenu } from './components/TabMenu/tabMenu'\r\nimport { themes } from './app-data/app-data'\r\nimport './App.css';\r\n\r\nclass App extends Component<{}, IState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state  = {\r\n      themes: themes,\r\n      content: [],\r\n      activeTab: 0,\r\n    };\r\n  }\r\n\r\n  onTabClick: (id: number) => void = (id) => {\r\n    this.setState({ activeTab: id })\r\n    getNews(this.state.themes[id])\r\n      .then(data => this.setState({ content: data.articles }));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.onTabClick(0);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <TabMenu themes={this.state.themes} activeTab={this.state.activeTab} onTabClick={this.onTabClick} />\r\n        <Content articles={this.state.content} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}